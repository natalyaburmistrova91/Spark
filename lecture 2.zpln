{
  "paragraphs": [
    {
      "title": "Задание схемы DataFrame",
      "text": "%pyspark\n\nschema = \"`Id` INT, `First` STRING, `Last` STRING, `Url` STRING, `Published` STRING, `Hits` INT, `Campaigns` ARRAY<STRING>\"\n# Create our static data\ndata = [\n    [1, \"Jules\", \"Damji\", \"https://tinyurl.1\", \"1/4/2016\", 4535, [\"twitter\",\"LinkedIn\"]],\n    [2, \"Brooke\",\"Wenig\", \"https://tinyurl.2\", \"5/5/2018\", 8908, [\"twitter\", \"LinkedIn\"]],\n    [3, \"Denny\", \"Lee\", \"https://tinyurl.3\", \"6/7/2019\", 7659, [\"web\", \"twitter\", \"FB\", \"LinkedIn\"]],\n    [4, \"Tathagata\", \"Das\", \"https://tinyurl.4\", \"5/12/2018\", 10568, [\"twitter\", \"FB\"]],\n    [5, \"Matei\",\"Zaharia\", \"https://tinyurl.5\", \"5/14/2014\", 40578, [\"web\", \"twitter\", \"FB\", \"LinkedIn\"]],\n    [6, \"Reynold\", \"Xin\", \"https://tinyurl.6\", \"3/2/2015\", 25568, [\"twitter\", \"LinkedIn\"]]\n]\n\n# Create a DataFrame using the schema defined above\nblogs_df = spark.createDataFrame(data, schema)\n# Show the DataFrame; it should reflect our table above\nblogs_df.show()\n# Print the schema used by Spark to process the DataFrame\nprint(blogs_df.printSchema())",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+---------+-------+-----------------+---------+-----+--------------------+\n| Id|    First|   Last|              Url|Published| Hits|           Campaigns|\n+---+---------+-------+-----------------+---------+-----+--------------------+\n|  1|    Jules|  Damji|https://tinyurl.1| 1/4/2016| 4535| [twitter, LinkedIn]|\n|  2|   Brooke|  Wenig|https://tinyurl.2| 5/5/2018| 8908| [twitter, LinkedIn]|\n|  3|    Denny|    Lee|https://tinyurl.3| 6/7/2019| 7659|[web, twitter, FB...|\n|  4|Tathagata|    Das|https://tinyurl.4|5/12/2018|10568|       [twitter, FB]|\n|  5|    Matei|Zaharia|https://tinyurl.5|5/14/2014|40578|[web, twitter, FB...|\n|  6|  Reynold|    Xin|https://tinyurl.6| 3/2/2015|25568| [twitter, LinkedIn]|\n+---+---------+-------+-----------------+---------+-----+--------------------+\n\nroot\n |-- Id: integer (nullable = true)\n |-- First: string (nullable = true)\n |-- Last: string (nullable = true)\n |-- Url: string (nullable = true)\n |-- Published: string (nullable = true)\n |-- Hits: integer (nullable = true)\n |-- Campaigns: array (nullable = true)\n |    |-- element: string (containsNull = true)\n\nNone\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421178_894380796",
      "id": "20201119-160217_137855542",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "focus": true,
      "$$hashKey": "object:29997"
    },
    {
      "text": "%pyspark\n\nfrom pyspark.sql.functions import col, sum\n\nblogs_df\\\n.selectExpr(\"*\" , \"concat(first, ' ', last) full_name\")\\\n.agg(sum(col(\"Hits\")).alias(\"Hits\"))\\\n.show()",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-----+\n| Hits|\n+-----+\n|97816|\n+-----+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421179_1779045101",
      "id": "20201123-173223_725419356",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:29998"
    },
    {
      "text": "%pyspark\n\nfrom pyspark.sql.functions import expr\n\nblogs_df\\\n.where(\"hits > 10000\")\\\n.show()\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+---------+-------+-----------------+---------+-----+--------------------+\n| Id|    First|   Last|              Url|Published| Hits|           Campaigns|\n+---+---------+-------+-----------------+---------+-----+--------------------+\n|  4|Tathagata|    Das|https://tinyurl.4|5/12/2018|10568|       [twitter, FB]|\n|  5|    Matei|Zaharia|https://tinyurl.5|5/14/2014|40578|[web, twitter, FB...|\n|  6|  Reynold|    Xin|https://tinyurl.6| 3/2/2015|25568| [twitter, LinkedIn]|\n+---+---------+-------+-----------------+---------+-----+--------------------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421179_802632853",
      "id": "20201221-174427_1467084676",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:29999"
    },
    {
      "text": "\n\nsc.applicationId",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res9: String = application_1605775743750_0010\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421179_937435768",
      "id": "20201123-173916_919198115",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30000"
    },
    {
      "title": "Create DataFrame via DataFrameReader",
      "text": "%pyspark\nimport os\nfrom pyspark.sql.types import *\n    \nSPARK_HOME = os.getenv('SPARK_HOME')\n\n# Read data from json file\n# link for this people.json (https://github.com/apache/spark/blob/master/examples/src/main/resources/people.json)\n# Use hdfs path if you are using hdfs\ndf1 = spark.read.json(\"file://\" + SPARK_HOME + \"/examples/src/main/resources/people.json\")\ndf1.printSchema()\ndf1.show()\n\n# Read data from csv file. You can customize it via spark.read.options. E.g. In the following example, we customize the sep and header\ndf2 = spark.read.options(sep=\";\", header=True).csv(\"file://\"  + SPARK_HOME + \"/examples/src/main/resources/people.csv\")\ndf2.printSchema()\ndf2.show()\n\n# Specify schema for your csv file\nfrom pyspark.sql.types import StructType, StringType, IntegerType\n\nschema = StructType().add(\"name\", StringType(), True) \\\n    .add(\"age\", IntegerType(), True) \\\n    .add(\"job\", StringType(), True)\n    \ndf3 = spark.read\\\n    .options(sep=\";\", header=True) \\\n    .schema(schema) \\\n    .csv(\"file://\" + SPARK_HOME + \"/examples/src/main/resources/people.csv\") \n    \ndf3.printSchema()\ndf3.show()\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- age: long (nullable = true)\n |-- name: string (nullable = true)\n\n+----+-------+\n| age|   name|\n+----+-------+\n|null|Michael|\n|  30|   Andy|\n|  19| Justin|\n+----+-------+\n\nroot\n |-- name: string (nullable = true)\n |-- age: string (nullable = true)\n |-- job: string (nullable = true)\n\n+-----+---+---------+\n| name|age|      job|\n+-----+---+---------+\n|Jorge| 30|Developer|\n|  Bob| 32|Developer|\n+-----+---+---------+\n\nroot\n |-- name: string (nullable = true)\n |-- age: integer (nullable = true)\n |-- job: string (nullable = true)\n\n+-----+---+---------+\n| name|age|      job|\n+-----+---+---------+\n|Jorge| 30|Developer|\n|  Bob| 32|Developer|\n+-----+---+---------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421179_926212300",
      "id": "20201119-143132_2024282004",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30001"
    },
    {
      "text": "%pyspark\n\nspark.conf.get(\"spark.sql.files.maxPartitionBytes\")\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "u'134217728'\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421179_1118795548",
      "id": "20201119-083056_1408855290",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30002"
    },
    {
      "text": "spark.table(\"homework.bank\").show",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+-------------+-------+---------+-------+-------+-------+----+--------+---+-----+--------+--------+-----+--------+--------+---+\n|age|          job|marital|education|default|balance|housing|loan| contact|day|month|duration|campaign|pdays|previous|poutcome|  y|\n+---+-------------+-------+---------+-------+-------+-------+----+--------+---+-----+--------+--------+-----+--------+--------+---+\n| 30|   unemployed|married|  primary|     no|   1787|     no|  no|cellular| 19|  oct|      79|       1|   -1|       0| unknown| no|\n| 33|     services|married|secondary|     no|   4789|    yes| yes|cellular| 11|  may|     220|       1|  339|       4| failure| no|\n| 35|   management| single| tertiary|     no|   1350|    yes|  no|cellular| 16|  apr|     185|       1|  330|       1| failure| no|\n| 30|   management|married| tertiary|     no|   1476|    yes| yes| unknown|  3|  jun|     199|       4|   -1|       0| unknown| no|\n| 59|  blue-collar|married|secondary|     no|      0|    yes|  no| unknown|  5|  may|     226|       1|   -1|       0| unknown| no|\n| 35|   management| single| tertiary|     no|    747|     no|  no|cellular| 23|  feb|     141|       2|  176|       3| failure| no|\n| 36|self-employed|married| tertiary|     no|    307|    yes|  no|cellular| 14|  may|     341|       1|  330|       2|   other| no|\n| 39|   technician|married|secondary|     no|    147|    yes|  no|cellular|  6|  may|     151|       2|   -1|       0| unknown| no|\n| 41| entrepreneur|married| tertiary|     no|    221|    yes|  no| unknown| 14|  may|      57|       2|   -1|       0| unknown| no|\n| 43|     services|married|  primary|     no|    -88|    yes| yes|cellular| 17|  apr|     313|       1|  147|       2| failure| no|\n| 39|     services|married|secondary|     no|   9374|    yes|  no| unknown| 20|  may|     273|       1|   -1|       0| unknown| no|\n| 43|       admin.|married|secondary|     no|    264|    yes|  no|cellular| 17|  apr|     113|       2|   -1|       0| unknown| no|\n| 36|   technician|married| tertiary|     no|   1109|     no|  no|cellular| 13|  aug|     328|       2|   -1|       0| unknown| no|\n| 20|      student| single|secondary|     no|    502|     no|  no|cellular| 30|  apr|     261|       1|   -1|       0| unknown|yes|\n| 31|  blue-collar|married|secondary|     no|    360|    yes| yes|cellular| 29|  jan|      89|       1|  241|       1| failure| no|\n| 40|   management|married| tertiary|     no|    194|     no| yes|cellular| 29|  aug|     189|       2|   -1|       0| unknown| no|\n| 56|   technician|married|secondary|     no|   4073|     no|  no|cellular| 27|  aug|     239|       5|   -1|       0| unknown| no|\n| 37|       admin.| single| tertiary|     no|   2317|    yes|  no|cellular| 20|  apr|     114|       1|  152|       2| failure| no|\n| 25|  blue-collar| single|  primary|     no|   -221|    yes|  no| unknown| 23|  may|     250|       1|   -1|       0| unknown| no|\n| 31|     services|married|secondary|     no|    132|     no|  no|cellular|  7|  jul|     148|       1|  152|       1|   other| no|\n+---+-------------+-------+---------+-------+-------+-------+----+--------+---+-----+--------+--------+-----+--------+--------+---+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421179_477590804",
      "id": "20201119-185154_464618414",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30003"
    },
    {
      "text": "%md \n\nWhat were all the different types of fire calls in 2018?\nWhat months within the year 2018 saw the highest number of fire calls?\nWhich neighborhood in San Francisco generated the most fire calls in 2018?\nWhich neighborhoods had the worst response times to fire calls in 2018?\nWhich week in the year in 2018 had the most fire calls?\nIs there a correlation between neighborhood, zip code, and number of fire calls?\nHow can we use Parquet files or SQL tables to store this data and read it back?\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<p>What were all the different types of fire calls in 2018?\n<br  />What months within the year 2018 saw the highest number of fire calls?\n<br  />Which neighborhood in San Francisco generated the most fire calls in 2018?\n<br  />Which neighborhoods had the worst response times to fire calls in 2018?\n<br  />Which week in the year in 2018 had the most fire calls?\n<br  />Is there a correlation between neighborhood, zip code, and number of fire calls?\n<br  />How can we use Parquet files or SQL tables to store this data and read it back?</p>\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421179_748275899",
      "id": "20201123-153356_556210607",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30004"
    },
    {
      "text": "%pyspark\n\nfireDF = spark.read.option(\"header\", True).csv(\"/user/admin/sf-fire-calls.csv\")\nfireDF.show(100, False)\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "State": "string",
                      "Color": "string",
                      "Count": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----------+------+--------------+-----------------------------+----------+----------+--------------------+----------------------+-------------------------------+----+-------+---------+-----------+----+----------------+--------+-------------+-------+-------------+---------+--------------+--------------------------+----------------------+------------------+------------------------------+-------------------------------------+-------------+----------+\n|CallNumber|UnitID|IncidentNumber|CallType                     |CallDate  |WatchDate |CallFinalDisposition|AvailableDtTm         |Address                        |City|Zipcode|Battalion|StationArea|Box |OriginalPriority|Priority|FinalPriority|ALSUnit|CallTypeGroup|NumAlarms|UnitType      |UnitSequenceInCallDispatch|FirePreventionDistrict|SupervisorDistrict|Neighborhood                  |Location                             |RowID        |Delay     |\n+----------+------+--------------+-----------------------------+----------+----------+--------------------+----------------------+-------------------------------+----+-------+---------+-----------+----+----------------+--------+-------------+-------+-------------+---------+--------------+--------------------------+----------------------+------------------+------------------------------+-------------------------------------+-------------+----------+\n|20110016  |T13   |2003235       |Structure Fire               |01/11/2002|01/10/2002|Other               |01/11/2002 01:51:44 AM|2000 Block of CALIFORNIA ST    |SF  |94109  |B04      |38         |3362|3               |3       |3            |false  |null         |1        |TRUCK         |2                         |4                     |5                 |Pacific Heights               |(37.7895840679362, -122.428071912459)|020110016-T13|2.95      |\n|20110022  |M17   |2003241       |Medical Incident             |01/11/2002|01/10/2002|Other               |01/11/2002 03:01:18 AM|0 Block of SILVERVIEW DR       |SF  |94124  |B10      |42         |6495|3               |3       |3            |true   |null         |1        |MEDIC         |1                         |10                    |10                |Bayview Hunters Point         |(37.7337623673897, -122.396113802632)|020110022-M17|4.7       |\n|20110023  |M41   |2003242       |Medical Incident             |01/11/2002|01/10/2002|Other               |01/11/2002 02:39:50 AM|MARKET ST/MCALLISTER ST        |SF  |94102  |B03      |01         |1455|3               |3       |3            |true   |null         |1        |MEDIC         |2                         |3                     |6                 |Tenderloin                    |(37.7811772186856, -122.411699931232)|020110023-M41|2.4333334 |\n|20110032  |E11   |2003250       |Vehicle Fire                 |01/11/2002|01/10/2002|Other               |01/11/2002 04:16:46 AM|APPLETON AV/MISSION ST         |SF  |94110  |B06      |32         |5626|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |6                     |9                 |Bernal Heights                |(37.7388432849018, -122.423948785199)|020110032-E11|1.5       |\n|20110043  |B04   |2003259       |Alarms                       |01/11/2002|01/10/2002|Other               |01/11/2002 06:01:58 AM|1400 Block of SUTTER ST        |SF  |94109  |B04      |03         |3223|3               |3       |3            |false  |null         |1        |CHIEF         |2                         |4                     |2                 |Western Addition              |(37.7872890372638, -122.424236212664)|020110043-B04|3.4833333 |\n|20110072  |T08   |2003279       |Structure Fire               |01/11/2002|01/11/2002|Other               |01/11/2002 08:03:26 AM|BEALE ST/FOLSOM ST             |SF  |94105  |B03      |35         |2122|3               |3       |3            |false  |null         |1        |TRUCK         |2                         |3                     |6                 |Financial District/South Beach|(37.7886866619654, -122.392722833778)|020110072-T08|1.75      |\n|20110125  |E33   |2003301       |Alarms                       |01/11/2002|01/11/2002|Other               |01/11/2002 09:46:44 AM|0 Block of FARALLONES ST       |SF  |94112  |B09      |33         |8324|3               |3       |3            |false  |null         |1        |ENGINE        |2                         |9                     |11                |Oceanview/Merced/Ingleside    |(37.7140353531157, -122.454117149916)|020110125-E33|2.7166667 |\n|20110130  |E36   |2003304       |Alarms                       |01/11/2002|01/11/2002|Other               |01/11/2002 09:58:53 AM|600 Block of POLK ST           |SF  |94102  |B02      |03         |3114|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |2                     |6                 |Tenderloin                    |(37.7826266328595, -122.41915582123) |020110130-E36|1.7833333 |\n|20110197  |E05   |2003343       |Medical Incident             |01/11/2002|01/11/2002|Other               |01/11/2002 12:06:57 PM|1500 Block of WEBSTER ST       |SF  |94115  |B04      |05         |3513|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |4                     |5                 |Japantown                     |(37.784958590666, -122.431435274503) |020110197-E05|1.5166667 |\n|20110215  |E06   |2003348       |Medical Incident             |01/11/2002|01/11/2002|Other               |01/11/2002 01:08:40 PM|DIAMOND ST/MARKET ST           |SF  |94114  |B05      |06         |5415|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |5                     |8                 |Castro/Upper Market           |(37.7618954753708, -122.437298717721)|020110215-E06|2.7666667 |\n|20110274  |M07   |2003381       |Medical Incident             |01/11/2002|01/11/2002|Other               |01/11/2002 03:31:02 PM|2700 Block of MISSION ST       |SF  |94110  |B06      |11         |5525|1               |1       |2            |true   |null         |1        |MEDIC         |1                         |6                     |9                 |Mission                       |(37.7530339738059, -122.418588598473)|020110274-M07|2.1833334 |\n|20110275  |T15   |2003382       |Structure Fire               |01/11/2002|01/11/2002|Other               |01/11/2002 02:59:04 PM|BRUNSWICK ST/GUTTENBERG ST     |SF  |94112  |B09      |43         |6218|3               |3       |3            |false  |null         |1        |TRUCK         |1                         |9                     |11                |Excelsior                     |(37.7105545807996, -122.443335369545)|020110275-T15|2.5       |\n|20110304  |E03   |2003399       |Medical Incident             |01/11/2002|01/11/2002|Other               |01/11/2002 04:22:49 PM|1000 Block of SUTTER ST        |SF  |94109  |B04      |03         |1557|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |4                     |3                 |Nob Hill                      |(37.7881263034393, -122.417657214041)|020110304-E03|2.4166667 |\n|20110308  |E14   |2003403       |Medical Incident             |01/11/2002|01/11/2002|Other               |01/11/2002 04:18:33 PM|100 Block of 21ST AVE          |SF  |94121  |B07      |14         |7173|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |7                     |1                 |Outer Richmond                |(37.7850084431077, -122.480723607753)|020110308-E14|4.95      |\n|20110313  |B10   |2003408       |Structure Fire               |01/11/2002|01/11/2002|Other               |01/11/2002 04:09:08 PM|700 Block of CAPP ST           |SF  |94110  |B06      |07         |5472|3               |3       |3            |false  |null         |1        |CHIEF         |6                         |6                     |9                 |Mission                       |(37.7547064357942, -122.417513465479)|020110313-B10|1.4166666 |\n|20110313  |D3    |2003408       |Structure Fire               |01/11/2002|01/11/2002|Other               |01/11/2002 04:09:08 PM|700 Block of CAPP ST           |SF  |94110  |B06      |07         |5472|3               |3       |3            |false  |null         |1        |CHIEF         |4                         |6                     |9                 |Mission                       |(37.7547064357942, -122.417513465479)|020110313-D3 |2.5333333 |\n|20110313  |E32   |2003408       |Structure Fire               |01/11/2002|01/11/2002|Other               |01/11/2002 04:09:08 PM|700 Block of CAPP ST           |SF  |94110  |B06      |07         |5472|3               |3       |3            |true   |null         |1        |ENGINE        |8                         |6                     |9                 |Mission                       |(37.7547064357942, -122.417513465479)|020110313-E32|1.8833333 |\n|20110315  |RC2   |2003409       |Medical Incident             |01/11/2002|01/11/2002|Other               |01/11/2002 04:34:23 PM|200 Block of LAGUNA HONDA BLVD |SF  |94116  |B08      |20         |8635|3               |3       |3            |true   |null         |1        |RESCUE CAPTAIN|2                         |8                     |7                 |West of Twin Peaks            |(37.7501117393668, -122.460819155469)|020110315-RC2|5.35      |\n|20110330  |E14   |2003417       |Medical Incident             |01/11/2002|01/11/2002|Other               |01/11/2002 04:51:31 PM|BALBOA ST/PARK PRESIDIO BL     |SF  |94118  |B07      |31         |7145|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |7                     |1                 |Inner Richmond                |(37.7768682293368, -122.472039541478)|020110330-E14|2.0       |\n|20110330  |M12   |2003417       |Medical Incident             |01/11/2002|01/11/2002|Other               |01/11/2002 04:51:12 PM|BALBOA ST/PARK PRESIDIO BL     |SF  |94118  |B07      |31         |7145|3               |3       |3            |true   |null         |1        |MEDIC         |2                         |7                     |1                 |Inner Richmond                |(37.7768682293368, -122.472039541478)|020110330-M12|1.8166667 |\n|20110344  |T06   |2003429       |Odor (Strange / Unknown)     |01/11/2002|01/11/2002|Other               |01/11/2002 05:17:15 PM|2300 Block of MARKET ST        |SF  |94114  |B05      |06         |5233|3               |3       |3            |false  |null         |1        |TRUCK         |2                         |5                     |8                 |Castro/Upper Market           |(37.7635007029742, -122.434209629009)|020110344-T06|2.0833333 |\n|20110350  |M41   |2003435       |Medical Incident             |01/11/2002|01/11/2002|Other               |01/11/2002 05:46:30 PM|500 Block of BROADWAY          |SF  |94133  |B01      |02         |1311|2               |2       |2            |true   |null         |1        |MEDIC         |1                         |1                     |3                 |North Beach                   |(37.7980228452184, -122.405863212632)|020110350-M41|4.4666667 |\n|20110375  |B05   |2003453       |Alarms                       |01/11/2002|01/11/2002|Other               |01/11/2002 06:48:01 PM|100 Block of JOHNSTONE DR      |SF  |94131  |B05      |20         |5278|3               |3       |3            |false  |null         |1        |CHIEF         |3                         |5                     |7                 |Inner Sunset                  |(37.7585821585787, -122.453613744703)|020110375-B05|1.8       |\n|20110425  |B01   |2003497       |Structure Fire               |01/11/2002|01/11/2002|Other               |01/11/2002 09:03:17 PM|600 Block of OFARRELL ST       |SF  |94109  |B04      |03         |1544|3               |3       |3            |false  |null         |1        |CHIEF         |4                         |4                     |6                 |Tenderloin                    |(37.7854670505017, -122.415977627827)|020110425-B01|2.5666666 |\n|20110428  |M28   |2003500       |Medical Incident             |01/11/2002|01/11/2002|Other               |01/11/2002 10:08:48 PM|1000 Block of BATTERY ST       |SF  |94111  |B01      |13         |1153|3               |3       |3            |true   |null         |1        |MEDIC         |2                         |1                     |3                 |Financial District/South Beach|(37.8006802692983, -122.401542794883)|020110428-M28|3.8833334 |\n|20110467  |T19   |2003529       |Medical Incident             |01/11/2002|01/11/2002|Other               |01/11/2002 10:56:59 PM|3000 Block of 23RD AVE         |SF  |94132  |B08      |19         |8734|3               |3       |3            |false  |null         |1        |TRUCK         |1                         |8                     |7                 |Sunset/Parkside               |(37.7318470441445, -122.479112654493)|020110467-T19|3.3       |\n|20120016  |E43   |2003550       |Medical Incident             |01/12/2002|01/11/2002|Other               |01/12/2002 02:04:06 AM|0 Block of BLYTHDALE AVE       |SF  |94134  |B09      |43         |6244|3               |3       |3            |true   |null         |1        |ENGINE        |2                         |9                     |10                |Visitacion Valley             |(37.7106587183839, -122.417699843965)|020120016-E43|3.1       |\n|20120020  |E36   |2003554       |Structure Fire               |01/12/2002|01/11/2002|Other               |01/12/2002 01:56:32 AM|9TH ST/HOWARD ST               |SF  |94103  |B02      |36         |2335|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |2                     |6                 |South of Market               |(37.7749917496069, -122.413161109659)|020120020-E36|3.3333333 |\n|20120044  |M10   |2003576       |Medical Incident             |01/12/2002|01/11/2002|Other               |01/12/2002 04:17:22 AM|3800 Block of GEARY BLVD       |SF  |94118  |B07      |31         |7113|3               |3       |3            |true   |null         |1        |MEDIC         |2                         |7                     |1                 |Inner Richmond                |(37.7813145272908, -122.460540716843)|020120044-M10|3.9666667 |\n|20120045  |E21   |2003577       |Medical Incident             |01/12/2002|01/11/2002|Other               |01/12/2002 04:23:31 AM|300 Block of BAKER ST          |SF  |94117  |B05      |21         |4252|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |5                     |5                 |Lone Mountain/USF             |(37.7740926787047, -122.44108442597) |020120045-E21|3.25      |\n|20120052  |M36   |2003584       |Medical Incident             |01/12/2002|01/11/2002|Other               |01/12/2002 06:27:31 AM|400 Block of VALENCIA ST       |SF  |94103  |B02      |06         |5226|3               |3       |3            |true   |null         |1        |MEDIC         |2                         |2                     |9                 |Mission                       |(37.7661343875141, -122.421935077177)|020120052-M36|4.2833333 |\n|20120061  |M10   |2003593       |Medical Incident             |01/12/2002|01/11/2002|Other               |null                  |0 Block of TERRA VISTA AVE     |SF  |94115  |B05      |21         |4256|3               |3       |3            |true   |null         |1        |MEDIC         |1                         |5                     |2                 |Lone Mountain/USF             |(37.7814248717141, -122.441695636568)|020120061-M10|2.3       |\n|20120111  |E18   |2003618       |Odor (Strange / Unknown)     |01/12/2002|01/12/2002|Other               |01/12/2002 11:07:36 AM|2000 Block of 34TH AVE         |SF  |94116  |B08      |18         |7556|3               |3       |3            |false  |null         |1        |ENGINE        |2                         |8                     |4                 |Sunset/Parkside               |(37.7488650921071, -122.492289492253)|020120111-E18|2.8       |\n|20120127  |M38   |2003630       |Medical Incident             |01/12/2002|01/12/2002|Other               |01/12/2002 11:28:40 AM|LAGUNA ST/WASHINGTON ST        |SF  |94109  |B04      |38         |3361|3               |3       |3            |true   |null         |1        |MEDIC         |1                         |4                     |2                 |Pacific Heights               |(37.7922168970615, -122.429447193304)|020120127-M38|2.3833334 |\n|20120142  |E07   |2003639       |Medical Incident             |01/12/2002|01/12/2002|Other               |01/12/2002 12:15:25 PM|600 Block of SOUTH VAN NESS AVE|SF  |94110  |B02      |07         |5246|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |2                     |9                 |Mission                       |(37.7627737268131, -122.417186682545)|020120142-E07|2.45      |\n|20120147  |M38   |2003642       |Medical Incident             |01/12/2002|01/12/2002|Other               |01/12/2002 01:23:04 PM|1300 Block of HYDE ST          |SF  |94109  |B01      |41         |1564|1               |1       |2            |true   |null         |1        |MEDIC         |1                         |1                     |3                 |Russian Hill                  |(37.793235074749, -122.417915793747) |020120147-M38|6.25      |\n|20120149  |M01   |2003643       |Medical Incident             |01/12/2002|01/12/2002|Other               |01/12/2002 01:05:52 PM|16TH ST/MISSION ST             |SF  |94103  |B02      |07         |5236|1               |1       |2            |true   |null         |1        |MEDIC         |1                         |2                     |9                 |Mission                       |(37.7650513381945, -122.419668973861)|020120149-M01|3.6166666 |\n|20120153  |M41   |2003647       |Medical Incident             |01/12/2002|01/12/2002|Other               |01/12/2002 02:20:25 PM|500 Block of 30TH AVE          |SF  |94121  |B07      |14         |0722|3               |3       |3            |true   |null         |1        |MEDIC         |2                         |7                     |1                 |Outer Richmond                |(37.7788847355525, -122.48995472763) |020120153-M41|4.65      |\n|20120155  |B08   |2003649       |Odor (Strange / Unknown)     |01/12/2002|01/12/2002|Other               |01/12/2002 01:03:10 PM|1500 Block of 5TH AVE          |SF  |94122  |B08      |12         |7328|3               |3       |3            |false  |null         |1        |CHIEF         |3                         |8                     |7                 |Inner Sunset                  |(37.7598374406709, -122.46094294867) |020120155-B08|4.1833334 |\n|20120166  |E01   |2003656       |Medical Incident             |01/12/2002|01/12/2002|Other               |01/12/2002 01:22:58 PM|4TH ST/MISSION ST              |SF  |94103  |B03      |01         |2213|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |3                     |6                 |South of Market               |(37.7844787439707, -122.404266872501)|020120166-E01|1.95      |\n|20120210  |E44   |2003688       |Medical Incident             |01/12/2002|01/12/2002|Other               |01/12/2002 04:25:35 PM|0 Block of AQUAVISTA WAY       |SF  |94131  |B09      |20         |5362|3               |3       |3            |true   |null         |1        |ENGINE        |1                         |8                     |7                 |Twin Peaks                    |(37.752557468944, -122.449351606127) |020120210-E44|3.55      |\n|20120217  |M03   |2003695       |Structure Fire               |01/12/2002|01/12/2002|Other               |01/12/2002 04:46:59 PM|400 Block of TURK ST           |SF  |94102  |B02      |03         |1554|3               |3       |3            |true   |null         |1        |MEDIC         |3                         |2                     |6                 |Tenderloin                    |(37.7825569563078, -122.416349428183)|020120217-M03|1.5666667 |\n|20120254  |M17   |2003724       |Medical Incident             |01/12/2002|01/12/2002|Other               |01/12/2002 07:15:23 PM|0 Block of REARDON RD          |SF  |94124  |B10      |17         |6625|3               |3       |3            |true   |null         |1        |MEDIC         |2                         |10                    |10                |Bayview Hunters Point         |(37.7294407135003, -122.377026608239)|020120254-M17|2.7833333 |\n|20120268  |M07   |2003735       |Medical Incident             |01/12/2002|01/12/2002|Other               |01/12/2002 07:26:52 PM|1800 Block of SILLIMAN ST      |SF  |94134  |B09      |43         |6153|3               |3       |3            |true   |null         |1        |MEDIC         |2                         |9                     |9                 |Excelsior                     |(37.7264150130988, -122.423317090957)|020120268-M07|4.5333333 |\n|20120295  |B05   |2003756       |Alarms                       |01/12/2002|01/12/2002|Other               |01/12/2002 07:54:42 PM|500 Block of STEINER ST        |SF  |94117  |B05      |21         |3632|3               |3       |3            |false  |null         |1        |CHIEF         |2                         |5                     |5                 |Hayes Valley                  |(37.7742331365027, -122.432492947831)|020120295-B05|2.0833333 |\n|20120309  |M05   |2003769       |Medical Incident             |01/12/2002|01/12/2002|Other               |01/12/2002 09:14:35 PM|OAK ST/WEBSTER ST              |SF  |94102  |B02      |05         |3523|3               |3       |3            |true   |null         |1        |MEDIC         |2                         |2                     |5                 |Hayes Valley                  |(37.774181421555, -122.429178343494) |020120309-M05|1.25      |\n|20120311  |E07   |2003770       |Smoke Investigation (Outside)|01/12/2002|01/12/2002|Other               |01/12/2002 08:44:01 PM|900 Block of SHOTWELL ST       |SF  |94110  |B06      |07         |0544|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |6                     |9                 |Mission                       |(37.7532406253685, -122.415177223195)|020120311-E07|2.1166666 |\n|20120322  |D2    |2003777       |Structure Fire               |01/12/2002|01/12/2002|Other               |01/12/2002 09:14:13 PM|0 Block of JONES ST            |SF  |94102  |B03      |01         |1455|3               |3       |3            |false  |null         |1        |CHIEF         |6                         |2                     |6                 |Tenderloin                    |(37.7815955871561, -122.412190669917)|020120322-D2 |1.9333333 |\n|20120350  |E03   |2003800       |Medical Incident             |01/12/2002|01/12/2002|Other               |01/12/2002 11:19:49 PM|400 Block of EDDY ST           |SF  |94102  |B02      |03         |1545|3               |3       |3            |false  |null         |1        |ENGINE        |2                         |2                     |6                 |Tenderloin                    |(37.7835654755497, -122.415051136249)|020120350-E03|3.1666667 |\n|20130009  |E37   |2003814       |Medical Incident             |01/13/2002|01/12/2002|Other               |01/13/2002 01:05:26 AM|1000 Block of DE HARO ST       |SF  |94107  |B10      |37         |2561|3               |3       |3            |true   |null         |1        |ENGINE        |1                         |10                    |10                |Potrero Hill                  |(37.7559025882179, -122.400816594989)|020130009-E37|4.766667  |\n|20130010  |E18   |2003815       |Medical Incident             |01/13/2002|01/12/2002|Other               |01/13/2002 01:08:57 AM|2700 Block of 38TH AVE         |SF  |94116  |B08      |18         |7616|3               |3       |3            |false  |null         |1        |ENGINE        |2                         |8                     |4                 |Sunset/Parkside               |(37.7356360325796, -122.495526420481)|020130010-E18|3.45      |\n|20130013  |M03   |2003818       |Medical Incident             |01/13/2002|01/12/2002|Other               |01/13/2002 01:51:15 AM|800 Block of LARKIN ST         |SF  |94109  |B04      |03         |1642|2               |2       |2            |true   |null         |1        |MEDIC         |1                         |4                     |6                 |Tenderloin                    |(37.7858627664608, -122.418110537872)|020130013-M03|5.2       |\n|20130040  |E35   |2003843       |Medical Incident             |01/13/2002|01/12/2002|Other               |01/13/2002 03:35:33 AM|500 Block of HARRISON ST       |SF  |94105  |B03      |35         |2136|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |3                     |6                 |Financial District/South Beach|(37.7855694880471, -122.393469162416)|020130040-E35|3.5333333 |\n|20130045  |RS1   |2003848       |Medical Incident             |01/13/2002|01/12/2002|Other               |01/13/2002 03:56:48 AM|300 Block of CLEMENTINA ST     |SF  |94103  |B03      |01         |2215|3               |3       |3            |false  |null         |1        |RESCUE SQUAD  |2                         |3                     |6                 |South of Market               |(37.7820387146172, -122.40232147638) |020130045-RS1|4.6666665 |\n|20130086  |T11   |2003876       |Medical Incident             |01/13/2002|01/13/2002|Other               |01/13/2002 08:35:01 AM|2900 Block of MISSION ST       |SF  |94110  |B06      |11         |5613|3               |3       |3            |true   |null         |1        |TRUCK         |2                         |6                     |9                 |Mission                       |(37.7498446220826, -122.418142583283)|020130086-T11|1.55      |\n|20130095  |M43   |2003880       |Medical Incident             |01/13/2002|01/13/2002|Other               |01/13/2002 10:01:39 AM|0 Block of NAPLES ST           |SF  |94112  |B09      |32         |6143|3               |3       |3            |true   |null         |1        |MEDIC         |2                         |9                     |11                |Excelsior                     |(37.7278485543492, -122.425837521286)|020130095-M43|1.4666667 |\n|20130106  |RS2   |2003887       |Structure Fire               |01/13/2002|01/13/2002|Other               |01/13/2002 09:38:41 AM|22ND ST/CHURCH ST              |SF  |94114  |B06      |11         |5467|3               |3       |3            |false  |null         |1        |RESCUE SQUAD  |8                         |6                     |8                 |Noe Valley                    |(37.7548967204015, -122.427735561494)|020130106-RS2|3.05      |\n|20130142  |E08   |2003916       |Other                        |01/13/2002|01/13/2002|Other               |01/13/2002 12:34:42 PM|800 Block of HARRISON ST       |SF  |94107  |B03      |08         |2243|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |3                     |6                 |South of Market               |(37.7799507434806, -122.400778586916)|020130142-E08|4.9333334 |\n|20130149  |B01   |2003922       |Alarms                       |01/13/2002|01/13/2002|Other               |01/13/2002 12:39:23 PM|400 Block of LEAVENWORTH ST    |SF  |94109  |B04      |03         |1544|3               |3       |3            |false  |null         |1        |CHIEF         |2                         |2                     |6                 |Tenderloin                    |(37.7851111081788, -122.414592038343)|020130149-B01|1.8       |\n|20130154  |E03   |2003926       |Alarms                       |01/13/2002|01/13/2002|Other               |01/13/2002 01:01:31 PM|400 Block of LEAVENWORTH ST    |SF  |94109  |B04      |03         |1544|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |2                     |6                 |Tenderloin                    |(37.7851111081788, -122.414592038343)|020130154-E03|3.0166667 |\n|20130204  |T05   |2003962       |Alarms                       |01/13/2002|01/13/2002|Other               |01/13/2002 02:42:42 PM|500 Block of OAK ST            |SF  |94102  |B02      |05         |3523|3               |3       |3            |false  |null         |1        |TRUCK         |2                         |2                     |5                 |Hayes Valley                  |(37.7742307091945, -122.428351459261)|020130204-T05|1.9833333 |\n|20130208  |M17   |2003965       |Medical Incident             |01/13/2002|01/13/2002|Other               |01/13/2002 03:22:02 PM|BOYLSTON ST/HALE ST            |SF  |94134  |B10      |42         |6365|3               |3       |3            |true   |null         |1        |MEDIC         |3                         |9                     |9                 |Portola                       |(37.7314787762164, -122.410756537883)|020130208-M17|1.7       |\n|20130210  |M28   |2003967       |Medical Incident             |01/13/2002|01/13/2002|Other               |01/13/2002 03:07:57 PM|700 Block of BROADWAY          |SF  |94133  |B01      |02         |1353|3               |3       |3            |true   |null         |1        |MEDIC         |2                         |1                     |3                 |Chinatown                     |(37.7976146082072, -122.409164766852)|020130210-M28|2.5       |\n|20130223  |T01   |2003979       |Alarms                       |01/13/2002|01/13/2002|Other               |01/13/2002 03:39:49 PM|700 Block of MARKET ST         |SF  |94103  |B03      |01         |2211|3               |3       |3            |false  |null         |1        |TRUCK         |3                         |3                     |6                 |Financial District/South Beach|(37.7871160984672, -122.403919148357)|020130223-T01|2.3333333 |\n|20130252  |M36   |2004003       |Medical Incident             |01/13/2002|01/13/2002|Other               |01/13/2002 04:50:08 PM|HAIGHT ST/OCTAVIA ST           |SF  |94102  |B02      |36         |3313|3               |3       |3            |true   |null         |1        |MEDIC         |2                         |2                     |5                 |Hayes Valley                  |(37.772957392567, -122.423758380219) |020130252-M36|1.8       |\n|20130255  |M07   |2004006       |Medical Incident             |01/13/2002|01/13/2002|Other               |01/13/2002 05:13:24 PM|24TH ST/ALABAMA ST             |SF  |94110  |B06      |07         |5527|3               |3       |3            |true   |null         |1        |MEDIC         |1                         |6                     |9                 |Mission                       |(37.7526848900219, -122.410962662832)|020130255-M07|1.8       |\n|20130258  |RC4   |2004009       |Medical Incident             |01/13/2002|01/13/2002|Other               |01/13/2002 05:16:07 PM|200 Block of CRESTA VISTA DR   |SF  |94127  |B09      |39         |8256|E               |E       |3            |true   |null         |1        |RESCUE CAPTAIN|4                         |9                     |7                 |West of Twin Peaks            |(37.735631914703, -122.454282422725) |020130258-RC4|3.1       |\n|20130330  |B08   |2004070       |Structure Fire               |01/13/2002|01/13/2002|Other               |01/13/2002 09:10:07 PM|6300 Block of CALIFORNIA ST    |SF  |94121  |B07      |14         |7214|3               |3       |3            |false  |null         |1        |CHIEF         |7                         |7                     |1                 |Outer Richmond                |(37.7838030202773, -122.485545885783)|020130330-B08|4.55      |\n|20130330  |T14   |2004070       |Structure Fire               |01/13/2002|01/13/2002|Other               |01/13/2002 09:22:34 PM|6300 Block of CALIFORNIA ST    |SF  |94121  |B07      |14         |7214|3               |3       |3            |false  |null         |1        |TRUCK         |4                         |7                     |1                 |Outer Richmond                |(37.7838030202773, -122.485545885783)|020130330-T14|2.8666666 |\n|20130331  |T11   |2004071       |Medical Incident             |01/13/2002|01/13/2002|Other               |01/13/2002 09:23:49 PM|900 Block of DIAMOND ST        |SF  |94114  |B06      |24         |5521|3               |3       |3            |true   |null         |1        |TRUCK         |1                         |6                     |8                 |Noe Valley                    |(37.7499583474478, -122.436241579612)|020130331-T11|3.3333333 |\n|20130352  |B05   |2004089       |Alarms                       |01/13/2002|01/13/2002|Other               |01/13/2002 11:00:13 PM|1800 Block of GOLDEN GATE AVE  |SF  |94115  |B05      |21         |4242|3               |3       |3            |false  |null         |1        |CHIEF         |2                         |5                     |5                 |Western Addition              |(37.7783512875178, -122.44102844941) |020130352-B05|1.7333333 |\n|20130354  |E14   |2004091       |Outside Fire                 |01/13/2002|01/13/2002|Other               |01/13/2002 11:16:07 PM|28TH AV/BALBOA ST              |SF  |94121  |B07      |14         |7225|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |7                     |1                 |Outer Richmond                |(37.7761552340808, -122.487669439804)|020130354-E14|1.2166667 |\n|20140010  |E33   |2004108       |Medical Incident             |01/14/2002|01/13/2002|Other               |01/14/2002 01:32:59 AM|500 Block of GARFIELD ST       |SF  |94132  |B09      |33         |8432|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |9                     |11                |Oceanview/Merced/Ingleside    |(37.7197236320858, -122.467603096548)|020140010-E33|3.6333334 |\n|20140023  |M38   |2004119       |Medical Incident             |01/14/2002|01/13/2002|Other               |01/14/2002 03:42:52 AM|1200 Block of FILLMORE ST      |SF  |94115  |B05      |05         |3535|3               |3       |3            |true   |null         |1        |MEDIC         |2                         |5                     |5                 |Western Addition              |(37.7809710233586, -122.432166356881)|020140023-M38|3.9166667 |\n|20140065  |E02   |2004151       |Medical Incident             |01/14/2002|01/13/2002|Other               |01/14/2002 08:09:18 AM|BROADWAY/COLUMBUS AV           |SF  |94133  |B01      |02         |1311|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |1                     |3                 |Chinatown                     |(37.7978646128064, -122.406667932419)|020140065-E02|3.2666667 |\n|20140067  |T19   |2004152       |Citizen Assist / Service Call|01/14/2002|01/14/2002|Other               |01/14/2002 08:16:54 AM|2900 Block of 22ND AVE         |SF  |94132  |B08      |19         |8732|3               |3       |3            |false  |null         |1        |TRUCK         |1                         |8                     |7                 |Sunset/Parkside               |(37.7335645188552, -122.477843526592)|020140067-T19|5.6       |\n|20140082  |T10   |2004160       |Structure Fire               |01/14/2002|01/14/2002|Other               |01/14/2002 08:47:46 AM|BEATRICE LN/ESPANOLA ST        |SF  |94124  |B10      |17         |6641|3               |3       |3            |false  |null         |1        |TRUCK         |2                         |10                    |10                |Bayview Hunters Point         |(37.7309011761712, -122.380149049067)|020140082-T10|1.1666666 |\n|20140085  |M36   |2004161       |Medical Incident             |01/14/2002|01/14/2002|Other               |01/14/2002 10:16:50 AM|600 Block of SOUTH VAN NESS AVE|SF  |94110  |B02      |07         |5246|3               |3       |3            |true   |null         |1        |MEDIC         |1                         |2                     |9                 |Mission                       |(37.7627737268131, -122.417186682545)|020140085-M36|2.85      |\n|20140089  |E06   |2004162       |Medical Incident             |01/14/2002|01/14/2002|Other               |01/14/2002 09:13:47 AM|100 Block of JULIAN AVE        |SF  |94103  |B02      |06         |5226|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |2                     |9                 |Mission                       |(37.7657838960434, -122.421047942224)|020140089-E06|2.3166666 |\n|20140125  |M41   |2004181       |Medical Incident             |01/14/2002|01/14/2002|Other               |01/14/2002 11:14:38 AM|400 Block of GREEN ST          |SF  |94133  |B01      |28         |1266|3               |3       |3            |true   |null         |1        |MEDIC         |2                         |1                     |3                 |North Beach                   |(37.7997732125206, -122.406404327326)|020140125-M41|2.7333333 |\n|20140170  |T01   |2004214       |Alarms                       |01/14/2002|01/14/2002|Other               |01/14/2002 12:17:13 PM|600 Block of MISSION ST        |SF  |94105  |B03      |01         |2178|3               |3       |3            |false  |null         |1        |TRUCK         |1                         |3                     |6                 |Financial District/South Beach|(37.7865888590763, -122.401692292616)|020140170-T01|2.0       |\n|20140177  |E35   |2004216       |Medical Incident             |01/14/2002|01/14/2002|Other               |01/14/2002 12:26:19 PM|MONTGOMERY ST/SUTTER ST        |SF  |94104  |B01      |13         |1164|3               |3       |3            |false  |null         |1        |ENGINE        |3                         |1                     |3                 |Financial District/South Beach|(37.7900390948551, -122.40218964437) |020140177-E35|2.8       |\n|20140177  |RS1   |2004216       |Medical Incident             |01/14/2002|01/14/2002|Other               |01/14/2002 12:27:03 PM|MONTGOMERY ST/SUTTER ST        |SF  |94104  |B01      |13         |1164|3               |3       |3            |false  |null         |1        |RESCUE SQUAD  |2                         |1                     |3                 |Financial District/South Beach|(37.7900390948551, -122.40218964437) |020140177-RS1|7.25      |\n|20140180  |E33   |2004218       |Structure Fire               |01/14/2002|01/14/2002|Other               |01/14/2002 12:38:50 PM|MISSION ST/SICKLES AV          |SF  |94112  |B09      |33         |6213|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |9                     |11                |Outer Mission                 |(37.7088063383308, -122.452664722246)|020140180-E33|1.3166667 |\n|20140209  |T13   |2004233       |Alarms                       |01/14/2002|01/14/2002|Other               |01/14/2002 01:52:42 PM|2300 Block of FILLMORE ST      |SF  |94115  |B04      |38         |3545|3               |3       |3            |true   |null         |1        |TRUCK         |3                         |4                     |2                 |Pacific Heights               |(37.791142743319, -122.434360166236) |020140209-T13|2.8833334 |\n|20140216  |E22   |2004238       |Structure Fire               |01/14/2002|01/14/2002|Other               |01/14/2002 02:39:09 PM|1500 Block of 26TH AVE         |SF  |94122  |B08      |18         |7475|3               |3       |3            |true   |null         |1        |ENGINE        |1                         |8                     |4                 |Sunset/Parkside               |(37.7585658388793, -122.48436889714) |020140216-E22|2.3       |\n|20140253  |E36   |2004265       |Structure Fire               |01/14/2002|01/14/2002|Other               |01/14/2002 04:37:18 PM|0 Block of LARKIN ST           |SF  |94102  |B02      |36         |1646|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |2                     |6                 |Tenderloin                    |(37.7775888205813, -122.416411092393)|020140253-E36|1.8166667 |\n|20140254  |M01   |2004266       |Medical Incident             |01/14/2002|01/14/2002|Other               |01/14/2002 05:13:49 PM|100 Block of TURK ST           |SF  |94102  |B03      |01         |1456|3               |3       |3            |true   |null         |1        |MEDIC         |2                         |3                     |6                 |Tenderloin                    |(37.7830549681708, -122.411577299279)|020140254-M01|3.5166667 |\n|20140276  |M36   |2004286       |Medical Incident             |01/14/2002|01/14/2002|Other               |01/14/2002 05:34:32 PM|CALL BOX: BUCHANAN ST/GROVE ST |SF  |94102  |B02      |05         |3424|2               |2       |2            |true   |null         |1        |MEDIC         |1                         |2                     |5                 |Hayes Valley                  |(37.7772298314861, -122.428128039144)|020140276-M36|4.5333333 |\n|20140291  |E43   |2004297       |Electrical Hazard            |01/14/2002|01/14/2002|Other               |01/14/2002 05:42:50 PM|900 Block of PRAGUE ST         |SF  |94112  |B09      |43         |0622|3               |3       |3            |true   |null         |1        |ENGINE        |1                         |9                     |11                |Excelsior                     |(37.7100115797557, -122.435814381727)|020140291-E43|2.0666666 |\n|20140297  |E07   |2004303       |Structure Fire               |01/14/2002|01/14/2002|Other               |01/14/2002 05:54:19 PM|22ND ST/MISSION ST             |SF  |94110  |B06      |07         |5472|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |6                     |9                 |Mission                       |(37.7554369366673, -122.41874757536) |020140297-E07|0.81666666|\n|20140306  |E34   |2004308       |Medical Incident             |01/14/2002|01/14/2002|Other               |01/14/2002 06:34:26 PM|800 Block of LA PLAYA          |SF  |94121  |B07      |34         |7311|3               |3       |3            |false  |null         |1        |ENGINE        |1                         |7                     |1                 |Outer Richmond                |(37.7723244294895, -122.510034921211)|020140306-E34|4.2833333 |\n|20140352  |M07   |2004340       |Medical Incident             |01/14/2002|01/14/2002|Other               |01/14/2002 09:31:53 PM|24TH ST/POTRERO AV             |SF  |94110  |B10      |37         |2554|3               |3       |3            |true   |null         |1        |MEDIC         |1                         |10                    |9                 |Mission                       |(37.7530040313925, -122.406336240587)|020140352-M07|1.5166667 |\n|20140364  |M07   |2004350       |Medical Incident             |01/14/2002|01/14/2002|Other               |01/14/2002 10:37:55 PM|2700 Block of 16TH ST          |SF  |94110  |B02      |07         |5237|3               |3       |3            |true   |null         |1        |MEDIC         |1                         |2                     |9                 |Mission                       |(37.7653263612606, -122.414201573327)|020140364-M07|2.1666667 |\n|20150001  |M36   |2004368       |Medical Incident             |01/15/2002|01/14/2002|Other               |01/15/2002 12:30:37 AM|DUBOCE AV/NOE ST               |SF  |94114  |B05      |06         |5131|3               |3       |3            |true   |null         |1        |MEDIC         |1                         |5                     |8                 |Haight Ashbury                |(37.7691783700971, -122.433572207997)|020150001-M36|2.9833333 |\n|20150004  |94    |2004370       |Medical Incident             |01/15/2002|01/14/2002|Other               |01/15/2002 01:26:45 AM|5TH ST/MARKET ST               |SF  |94103  |B03      |01         |1364|1               |1       |2            |true   |null         |1        |MEDIC         |1                         |3                     |6                 |South of Market               |(37.7839914857614, -122.408066547804)|020150004-94 |1.25      |\n|20150048  |RC2   |2004404       |Structure Fire               |01/15/2002|01/14/2002|Other               |01/15/2002 06:31:24 AM|700 Block of 35TH AVE          |SF  |94121  |B07      |34         |7252|3               |3       |3            |true   |null         |1        |RESCUE CAPTAIN|10                        |7                     |1                 |Outer Richmond                |(37.7748832270511, -122.495037870754)|020150048-RC2|3.5333333 |\n|20150048  |RS1   |2004404       |Structure Fire               |01/15/2002|01/14/2002|Other               |01/15/2002 06:31:24 AM|700 Block of 35TH AVE          |SF  |94121  |B07      |34         |7252|3               |3       |3            |false  |null         |1        |RESCUE SQUAD  |11                        |7                     |1                 |Outer Richmond                |(37.7748832270511, -122.495037870754)|020150048-RS1|1.9333333 |\n|20150056  |E35   |2004408       |Medical Incident             |01/15/2002|01/14/2002|Other               |01/15/2002 06:53:38 AM|100 Block of 7TH ST            |SF  |94103  |B03      |08         |2312|3               |3       |3            |false  |null         |1        |ENGINE        |2                         |3                     |6                 |South of Market               |(37.7790372933741, -122.41062000696) |020150056-E35|11.916667 |\n|20150062  |B01   |2004412       |Alarms                       |01/15/2002|01/14/2002|Other               |01/15/2002 07:21:10 AM|100 Block of FRANCISCO ST      |SF  |94133  |B01      |28         |1225|3               |3       |3            |false  |null         |1        |CHIEF         |2                         |1                     |3                 |North Beach                   |(37.8054738067872, -122.407570127181)|020150062-B01|1.8833333 |\n+----------+------+--------------+-----------------------------+----------+----------+--------------------+----------------------+-------------------------------+----+-------+---------+-----------+----+----------------+--------+-------------+-------+-------------+---------+--------------+--------------------------+----------------------+------------------+------------------------------+-------------------------------------+-------------+----------+\nonly showing top 100 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421179_629019428",
      "id": "20201119-184503_1883561312",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30005"
    },
    {
      "title": "What were all the different types of fire calls in 2018?",
      "text": "%pyspark\n\nfrom pyspark.sql.functions import to_timestamp\nfrom pyspark.sql.functions import year, month, countDistinct\n\n\nfireDF\\\n.coalesce(1)\\\n.withColumn(\"CallDate\", to_timestamp(fireDF.CallDate, 'dd/MM/yyyy'))\\\n.withColumn(\"CallYear\", year(\"CallDate\"))\\\n.where(\"CallYear = '2018'\") \\\n.select(\"CallType\")\\\n.distinct()\\\n.show(1000, False)",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 5,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {
                    "columns": [
                      {
                        "name": "State",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "Color",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "Count",
                        "visible": true,
                        "width": "*",
                        "sort": {
                          "priority": 0,
                          "direction": "desc"
                        },
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      }
                    ],
                    "scrollFocus": {},
                    "selection": [],
                    "grouping": {
                      "grouping": [],
                      "aggregations": [],
                      "rowExpandedStates": {}
                    },
                    "treeView": {},
                    "pagination": {
                      "paginationCurrentPage": 1,
                      "paginationPageSize": 250
                    }
                  },
                  "tableColumnTypeState": {
                    "names": {
                      "State": "string",
                      "Color": "string",
                      "Count": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                },
                "stackedAreaChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                },
                "lineChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "State",
                  "index": 0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "Count",
                  "index": 2,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------------------------------+\n|CallType                       |\n+-------------------------------+\n|Medical Incident               |\n|Alarms                         |\n|Citizen Assist / Service Call  |\n|Traffic Collision              |\n|Structure Fire                 |\n|Outside Fire                   |\n|Odor (Strange / Unknown)       |\n|Other                          |\n|Gas Leak (Natural and LP Gases)|\n|Fuel Spill                     |\n|Elevator / Escalator Rescue    |\n|Water Rescue                   |\n|Assist Police                  |\n|HazMat                         |\n|Train / Rail Incident          |\n|Vehicle Fire                   |\n|Smoke Investigation (Outside)  |\n|Electrical Hazard              |\n+-------------------------------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421180_1850982298",
      "id": "20201119-183637_1720828841",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30006"
    },
    {
      "title": "What months within the year 2018 saw the highest number of fire calls?",
      "text": "%pyspark\nfrom pyspark.sql.functions import to_timestamp\nfrom pyspark.sql.functions import year, month, countDistinct\n\nfireDF\\\n.withColumn(\"CallDate\", to_timestamp(fireDF.CallDate, 'dd/MM/yyyy'))\\\n.withColumn(\"CallMonth\", month(\"CallDate\"))\\\n.withColumn(\"CallYear\", year(\"CallDate\"))\\\n.where(\"CallYear = '2018'\") \\\n.groupBy(\"CallMonth\")\\\n.agg(\n    countDistinct(\"callNumber\").alias(\"call_count\")\n    )\\\n.orderBy(\"call_count\", ascending=False)\\\n.show()",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 7,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---------+----------+\n|CallMonth|call_count|\n+---------+----------+\n|        1|       400|\n|        4|       369|\n|        2|       367|\n|        7|       342|\n|        3|       341|\n|        5|       340|\n|        6|       337|\n|       12|       320|\n|       11|       313|\n|        9|       306|\n|        8|       304|\n|       10|       298|\n+---------+----------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421180_1202086314",
      "id": "20201123-153948_182435555",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30007"
    },
    {
      "title": "Which neighborhood in San Francisco generated the most fire calls in 2018?",
      "text": "%pyspark\n\n(fireDF\n.groupBy(\"Neighborhood\")\n.agg(countDistinct(\"callNumber\").alias(\"call_count\"))\n.orderBy(\"call_count\", ascending=False)\n.show(1000, False))",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------------------------------+----------+\n|Neighborhood                  |call_count|\n+------------------------------+----------+\n|Tenderloin                    |22025     |\n|South of Market               |16115     |\n|Mission                       |15364     |\n|Financial District/South Beach|11472     |\n|Bayview Hunters Point         |9208      |\n|Sunset/Parkside               |6704      |\n|Western Addition              |6317      |\n|Nob Hill                      |5587      |\n|Outer Richmond                |4387      |\n|Hayes Valley                  |4182      |\n|Castro/Upper Market           |4021      |\n|West of Twin Peaks            |3846      |\n|North Beach                   |3655      |\n|Chinatown                     |3594      |\n|Excelsior                     |3503      |\n|Pacific Heights               |3443      |\n|Marina                        |3255      |\n|Potrero Hill                  |3198      |\n|Bernal Heights                |3130      |\n|Inner Sunset                  |2827      |\n|Russian Hill                  |2614      |\n|Lakeshore                     |2527      |\n|Haight Ashbury                |2496      |\n|Outer Mission                 |2495      |\n|Oceanview/Merced/Ingleside    |2440      |\n|Visitacion Valley             |2334      |\n|Inner Richmond                |2310      |\n|Lone Mountain/USF             |2024      |\n|Mission Bay                   |1851      |\n|Noe Valley                    |1780      |\n|Portola                       |1625      |\n|Presidio Heights              |1568      |\n|Japantown                     |1527      |\n|Treasure Island               |1044      |\n|Golden Gate Park              |1001      |\n|Twin Peaks                    |996       |\n|Glen Park                     |809       |\n|Presidio                      |511       |\n|Seacliff                      |249       |\n|McLaren Park                  |201       |\n|None                          |177       |\n|Lincoln Park                  |159       |\n+------------------------------+----------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421180_137771342",
      "id": "20201123-154035_642016321",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30008"
    },
    {
      "title": "Which neighborhoods had the worst response times to fire calls in 2018?",
      "text": "%pyspark\n\nfireDF\\\n.where(\"lower(CallType) like '%fire%'\")\\\n.select(\"Neighborhood\", \"delay\", \"callType\")\\\n.orderBy(\"delay\", ascending=False)\\\n.show()",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------------+---------+--------------+\n|        Neighborhood|    delay|      callType|\n+--------------------+---------+--------------+\n|     Sunset/Parkside| 99.63333|Structure Fire|\n|             Mission|949.11664|Structure Fire|\n|           Chinatown|   931.45|Structure Fire|\n|             Mission| 92.51667|Structure Fire|\n|     Treasure Island|91.916664|  Outside Fire|\n|              Marina|     91.6|Structure Fire|\n|Financial Distric...| 9.983334|  Outside Fire|\n|      Inner Richmond| 9.983334|Structure Fire|\n|Financial Distric...| 9.983334|Structure Fire|\n|          Tenderloin| 9.966666|Structure Fire|\n|      Bernal Heights| 9.966666|Structure Fire|\n|            Presidio| 9.966666|Structure Fire|\n|     South of Market| 9.933333|  Outside Fire|\n|     South of Market| 9.933333|Structure Fire|\n|Bayview Hunters P...| 9.933333|Structure Fire|\n|     Pacific Heights| 9.916667|Structure Fire|\n|           Excelsior| 9.916667|Structure Fire|\n|Bayview Hunters P...| 9.916667|Structure Fire|\n|   Visitacion Valley| 9.916667|Structure Fire|\n|      Inner Richmond| 9.916667|Structure Fire|\n+--------------------+---------+--------------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421180_1929581240",
      "id": "20201123-154048_1864288634",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30009"
    },
    {
      "title": "Which week in the year in 2018 had the most fire calls?",
      "text": "%pyspark\n\nfrom pyspark.sql.functions import weekofyear, year\n\n\nfireDF\\\n.where(\"lower(CallType) like '%fire%'\")\\\n.withColumn(\"CallDate\", to_timestamp(fireDF.CallDate, 'dd/MM/yyyy'))\\\n.withColumn(\"CallWeek\", weekofyear(\"CallDate\"))\\\n.withColumn(\"CallYear\", year(\"CallDate\"))\\\n.where(\"CallYear = '2018'\") \\\n.groupBy(\"CallYear\", \"CallWeek\")\\\n.agg(\n    countDistinct(\"callNumber\").alias(\"call_count\")\n    )\\\n.orderBy(\"call_count\", ascending=False)\\\n.show()\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------+--------+----------+\n|CallYear|CallWeek|call_count|\n+--------+--------+----------+\n|    2018|       1|        30|\n|    2018|       6|        25|\n|    2018|      27|        25|\n|    2018|      23|        24|\n|    2018|      14|        23|\n|    2018|      10|        22|\n|    2018|      18|        21|\n|    2018|      49|        20|\n|    2018|      31|        18|\n|    2018|      40|        18|\n|    2018|      36|        18|\n|    2018|      32|        16|\n|    2018|      45|        14|\n|    2018|      19|        14|\n|    2018|       2|        14|\n|    2018|      22|        13|\n|    2018|       9|        13|\n|    2018|      15|        11|\n|    2018|      35|         9|\n|    2018|      28|         9|\n+--------+--------+----------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421180_677903137",
      "id": "20201123-160026_1960750235",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30010"
    },
    {
      "title": "Which week in the year in 2018 had the most fire calls?",
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421180_676756261",
      "id": "20201123-160035_178312652",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30011"
    },
    {
      "text": "%pyspark\nprint(sc.applicationId)",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "application_1607849830911_0149\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421180_1473009260",
      "id": "20201123-171812_657833892",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30012"
    },
    {
      "text": "%pyspark\n\nprint(spark.conf.get(\"spark.sql.shuffle.partitions\"))\n\nspark.conf.set(\"spark.sql.shuffle.partitions\", 20)\n\nprint(spark.conf.get(\"spark.sql.shuffle.partitions\"))",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "20\n20\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421180_691851871",
      "id": "20201123-160829_1282259000",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30013"
    },
    {
      "text": "spark.table(\"homework.bank\")",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res3: org.apache.spark.sql.DataFrame = [age: int, job: string ... 15 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421180_922369418",
      "id": "20201119-091834_818225723",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30014"
    },
    {
      "title": "Zeppelin Dynamic Form",
      "text": "%pyspark\n\nprint(\"Hello \" + z.textbox(\"name\"))",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {
          "name": "Egor Kotelnikov! Thanks to Michael Baranov for such lovely interface !"
        },
        "forms": {
          "name": {
            "type": "TextBox",
            "name": "name",
            "displayName": "name",
            "defaultValue": "",
            "hidden": false,
            "$$hashKey": "object:30631"
          }
        }
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Hello Egor Kotelnikov! Thanks to Michael Baranov for such lovely interface !\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421180_963035249",
      "id": "20201119-092639_1461880911",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30015"
    },
    {
      "text": "%sh\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sh",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421180_1885308003",
      "id": "20201119-095350_1200397555",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30016"
    },
    {
      "title": "Create UDF",
      "text": "%pyspark\n\ndf1 = spark.createDataFrame([(1, \"andy\", 20, \"USA\"), (2, \"jeff\", 23, \"China\"), (3, \"james\", 18, \"USA\")]) \\\n            .toDF(\"id\", \"name\", \"age\", \"country\")\n\n# Create udf create python lambda\nfrom pyspark.sql.functions import udf\nudf1 = udf(lambda e: e.upper())\ndf2 = df1.select(udf1(df1[\"name\"]))\ndf2.show()\n\n# UDF could also be used in filter, in this case the return type must be Boolean\n# We can also use annotation to create udf\nfrom pyspark.sql.types import *\n@udf(returnType=BooleanType())\ndef udf2(e):\n    if e >= 20:\n        return True;\n    else:\n        return False\n\ndf3 = df1.filter(udf2(df1[\"age\"]))\ndf3.show()\n\n# UDF could also accept more than 1 argument.\nudf3 = udf(lambda e1, e2: e1 + \"_\" + e2)\ndf4 = df1.select(udf3(df1[\"name\"], df1[\"country\"]).alias(\"name_country\"))\ndf4.show()\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------+\n|<lambda>(name)|\n+--------------+\n|          ANDY|\n|          JEFF|\n|         JAMES|\n+--------------+\n\n+---+----+---+-------+\n| id|name|age|country|\n+---+----+---+-------+\n|  1|andy| 20|    USA|\n|  2|jeff| 23|  China|\n+---+----+---+-------+\n\n+------------+\n|name_country|\n+------------+\n|    andy_USA|\n|  jeff_China|\n|   james_USA|\n+------------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421180_74469894",
      "id": "20201119-155951_457057931",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30017"
    },
    {
      "title": "groupBy",
      "text": "%pyspark\n\ndf1 = spark.createDataFrame([(1, \"andy\", 20, \"USA\"), (2, \"jeff\", 23, \"China\"), (3, \"james\", 18, \"USA\")]) \\\n           .toDF(\"id\", \"name\", \"age\", \"country\")\n\n# You can call agg function after groupBy directly, such as count/min/max/avg/sum\ndf2 = df1.groupBy(\"country\").count()\ndf2.show()\n\n# Pass a Map if you want to do multiple aggregation\ndf3 = df1.groupBy(\"country\").agg({\"age\": \"avg\", \"id\": \"count\"})\ndf3.show()\n\nimport pyspark.sql.functions as F\n# Or you can pass a list of agg function\ndf4 = df1.groupBy(\"country\").agg(F.avg(df1[\"age\"]).alias(\"avg_age\"), F.count(df1[\"id\"]).alias(\"count\"))\ndf4.show()\n\n# You can not pass Map if you want to do multiple aggregation on the same column as the key of Map should be unique. So in this case\n# you have to pass a list of agg functions\ndf5 = df1.groupBy(\"country\").agg(F.avg(df1[\"age\"]).alias(\"avg_age\"), F.max(df1[\"age\"]).alias(\"max_age\"))\ndf5.show()\n\n\n\n\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+-----+\n|country|count|\n+-------+-----+\n|  China|    1|\n|    USA|    2|\n+-------+-----+\n\n+-------+---------+--------+\n|country|count(id)|avg(age)|\n+-------+---------+--------+\n|  China|        1|    23.0|\n|    USA|        2|    19.0|\n+-------+---------+--------+\n\n+-------+-------+-----+\n|country|avg_age|count|\n+-------+-------+-----+\n|  China|   23.0|    1|\n|    USA|   19.0|    2|\n+-------+-------+-----+\n\n+-------+-------+-------+\n|country|avg_age|max_age|\n+-------+-------+-------+\n|  China|   23.0|     23|\n|    USA|   19.0|     20|\n+-------+-------+-------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421181_1889477962",
      "id": "20201119-155951_1376505763",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30018"
    },
    {
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421181_1685138225",
      "id": "20201119-160541_1487929652",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30019"
    },
    {
      "title": "Join on Single Field",
      "text": "%pyspark\n\ndf1 = spark.createDataFrame([(1, \"andy\", 20, 1), (2, \"jeff\", 23, 2), (3, \"james\", 18, 3)]).toDF(\"id\", \"name\", \"age\", \"c_id\")\ndf1.show()\n\ndf2 = spark.createDataFrame([(1, \"USA\"), (2, \"China\")]).toDF(\"c_id\", \"c_name\")\ndf2.show()\n\n# You can just specify the key name if join on the same key\ndf3 = df1.join(df2, \"c_id\")\ndf3.show()\n\n# Or you can specify the join condition expclitly in case the key is different between tables\ndf4 = df1.join(df2, df1[\"c_id\"] == df2[\"c_id\"])\ndf4.show()\n\n# You can specify the join type afte the join condition, by default it is inner join\ndf5 = df1.join(df2, df1[\"c_id\"] == df2[\"c_id\"], \"left_outer\")\ndf5.show()",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+-----+---+----+\n| id| name|age|c_id|\n+---+-----+---+----+\n|  1| andy| 20|   1|\n|  2| jeff| 23|   2|\n|  3|james| 18|   3|\n+---+-----+---+----+\n\n+----+------+\n|c_id|c_name|\n+----+------+\n|   1|   USA|\n|   2| China|\n+----+------+\n\n+----+---+----+---+------+\n|c_id| id|name|age|c_name|\n+----+---+----+---+------+\n|   1|  1|andy| 20|   USA|\n|   2|  2|jeff| 23| China|\n+----+---+----+---+------+\n\n+---+----+---+----+----+------+\n| id|name|age|c_id|c_id|c_name|\n+---+----+---+----+----+------+\n|  1|andy| 20|   1|   1|   USA|\n|  2|jeff| 23|   2|   2| China|\n+---+----+---+----+----+------+\n\n+---+-----+---+----+----+------+\n| id| name|age|c_id|c_id|c_name|\n+---+-----+---+----+----+------+\n|  1| andy| 20|   1|   1|   USA|\n|  3|james| 18|   3|null|  null|\n|  2| jeff| 23|   2|   2| China|\n+---+-----+---+----+----+------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421181_63825067",
      "id": "20201119-155952_2018022643",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30020"
    },
    {
      "title": "Join on Multiple Fields",
      "text": "%pyspark\n\ndf1 = spark.createDataFrame([(\"andy\", 20, 1, 1), (\"jeff\", 23, 1, 2), (\"james\", 12, 2, 2)]).toDF(\"name\", \"age\", \"key_1\", \"key_2\")\ndf1.show()\n\ndf2 = spark.createDataFrame([(1, 1, \"USA\"), (2, 2, \"China\")]).toDF(\"key_1\", \"key_2\", \"country\")\ndf2.show()\n\n# Join on 2 fields: key_1, key_2\n\n# You can pass a list of field name if the join field names are the same in both tables\ndf3 = df1.join(df2, [\"key_1\", \"key_2\"])\ndf3.show()\n\n# Or you can specify the join condition expclitly in case when the join fields name is differetnt in the two tables\ndf4 = df1.join(df2, (df1[\"key_1\"] == df2[\"key_1\"]) & (df1[\"key_2\"] == df2[\"key_2\"]))\ndf4.show()\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-----+---+-----+-----+\n| name|age|key_1|key_2|\n+-----+---+-----+-----+\n| andy| 20|    1|    1|\n| jeff| 23|    1|    2|\n|james| 12|    2|    2|\n+-----+---+-----+-----+\n\n+-----+-----+-------+\n|key_1|key_2|country|\n+-----+-----+-------+\n|    1|    1|    USA|\n|    2|    2|  China|\n+-----+-----+-------+\n\n+-----+-----+-----+---+-------+\n|key_1|key_2| name|age|country|\n+-----+-----+-----+---+-------+\n|    1|    1| andy| 20|    USA|\n|    2|    2|james| 12|  China|\n+-----+-----+-----+---+-------+\n\n+-----+---+-----+-----+-----+-----+-------+\n| name|age|key_1|key_2|key_1|key_2|country|\n+-----+---+-----+-----+-----+-----+-------+\n| andy| 20|    1|    1|    1|    1|    USA|\n|james| 12|    2|    2|    2|    2|  China|\n+-----+---+-----+-----+-----+-----+-------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421181_1802703309",
      "id": "20201119-155952_1524810954",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30021"
    },
    {
      "title": "spark.sql directly",
      "text": "%pyspark\n\ndf1 = spark.createDataFrame([(1, \"andy\", 20, \"USA\"), (2, \"jeff\", 23, \"China\"), (3, \"james\", 18, \"USA\")]) \\\n           .toDF(\"id\", \"name\", \"age\", \"country\")\n# call createOrReplaceTempView first if you want to query this DataFrame via sql\ndf1.createOrReplaceTempView(\"people\")\n# SparkSession.sql return DataFrame\ndf2 = spark.sql(\"select name, age from people\")\ndf2.show()\n\n# You need to register udf if you want to use it in sql\nspark.udf.register(\"udf1\", lambda e : e.upper())\ndf3 = spark.sql(\"select udf1(name), age from people\")\ndf3.show()",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-----+---+\n| name|age|\n+-----+---+\n| andy| 20|\n| jeff| 23|\n|james| 18|\n+-----+---+\n\n+----------+---+\n|udf1(name)|age|\n+----------+---+\n|      ANDY| 20|\n|      JEFF| 23|\n|     JAMES| 18|\n+----------+---+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421181_689607188",
      "id": "20201119-160613_1033868239",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30022"
    },
    {
      "title": "Create a DataFrame with 10M records",
      "text": "%pyspark\n\ndf = spark.range(1 * 10000000).toDF(\"id\").withColumn(\"square\", col(\"id\") * col(\"id\"))\n\ndf.cache() # Cache the data\n\ndf.count() # Materialize the cache",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "10000000\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421181_1406565303",
      "id": "20201123-161653_1459160344",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30023"
    },
    {
      "title": "Now get it from the cache",
      "text": "%pyspark\n\ndf.count()",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "10000000\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421181_1291507826",
      "id": "20201123-162010_1079090928",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30024"
    },
    {
      "text": "%pyspark\n\ndf.persist()",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421181_2076557266",
      "id": "20201123-175216_229943150",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30025"
    },
    {
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421181_1456741404",
      "id": "20201123-175407_2080877547",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30026"
    },
    {
      "text": "%spark\n\nspark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", \"-1\")\n// Generate some sample data for two data sets\n\nvar states = scala.collection.mutable.Map[Int, String]()\nvar items = scala.collection.mutable.Map[Int, String]()\nval rnd = new scala.util.Random(42)\n\n// Initialize states and items purchased\n\nstates += (0 -> \"AZ\", 1 -> \"CO\", 2-> \"CA\", 3-> \"TX\", 4 -> \"NY\", 5-> \"MI\")\nitems += (0 -> \"SKU-0\", 1 -> \"SKU-1\", 2-> \"SKU-2\", 3-> \"SKU-3\", 4 -> \"SKU-4\",\n5-> \"SKU-5\")\n// Create DataFrames\nval usersDF = (0 to 100000)\n    .map(id => (id, s\"user_${id}\", s\"user_${id}@databricks.com\", states(rnd.nextInt(5))))\n    .toDF(\"uid\", \"login\", \"email\", \"user_state\")\n\n\nval ordersDF = (0 to 100000)\n    .map(r => (r, r, rnd.nextInt(10000), 10 * r* 0.2d, states(rnd.nextInt(5)), items(rnd.nextInt(5))))\n    .toDF(\"transaction_id\", \"quantity\", \"users_id\", \"amount\", \"state\", \"items\")\n    \n    \n// Do the join\nval usersOrdersDF = ordersDF\n    .join(broadcast(usersDF), $\"users_id\" === $\"uid\", \"left\")\n    .select(\"users_id\", \"transaction_id\")\n    \n// Show the joined results\nusersOrdersDF.show(false)",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------+--------------+\n|users_id|transaction_id|\n+--------+--------------+\n|8432    |0             |\n|4041    |1             |\n|4657    |2             |\n|7210    |3             |\n|6062    |4             |\n|274     |5             |\n|9305    |6             |\n|1370    |7             |\n|0       |8             |\n|3563    |9             |\n|3435    |10            |\n|5971    |11            |\n|8835    |12            |\n|5805    |13            |\n|5804    |14            |\n|3984    |15            |\n|8523    |16            |\n|5387    |17            |\n|6754    |18            |\n|2607    |19            |\n+--------+--------------+\nonly showing top 20 rows\n\nstates: scala.collection.mutable.Map[Int,String] = Map(2 -> CA, 5 -> MI, 4 -> NY, 1 -> CO, 3 -> TX, 0 -> AZ)\nitems: scala.collection.mutable.Map[Int,String] = Map(2 -> SKU-2, 5 -> SKU-5, 4 -> SKU-4, 1 -> SKU-1, 3 -> SKU-3, 0 -> SKU-0)\nrnd: scala.util.Random = scala.util.Random@743c037\nusersDF: org.apache.spark.sql.DataFrame = [uid: int, login: string ... 2 more fields]\nordersDF: org.apache.spark.sql.DataFrame = [transaction_id: int, quantity: int ... 4 more fields]\nusersOrdersDF: org.apache.spark.sql.DataFrame = [users_id: int, transaction_id: int]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421181_205319549",
      "id": "20201123-162513_1705763116",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30027"
    },
    {
      "text": "usersOrdersDF.explain()",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "== Physical Plan ==\n*(3) SortMergeJoin [users_id#1978], [uid#1955], Inner\n:- *(1) Sort [users_id#1978 ASC NULLS FIRST], false, 0\n:  +- Exchange hashpartitioning(users_id#1978, 200)\n:     +- LocalTableScan [transaction_id#1976, quantity#1977, users_id#1978, amount#1979, state#1980, items#1981]\n+- *(2) Sort [uid#1955 ASC NULLS FIRST], false, 0\n   +- Exchange hashpartitioning(uid#1955, 200)\n      +- LocalTableScan [uid#1955, login#1956, email#1957, user_state#1958]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421181_558114254",
      "id": "20201123-162512_1340803928",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30028"
    },
    {
      "title": "Save bucketing",
      "text": "import org.apache.spark.sql.functions._\nimport org.apache.spark.sql.SaveMode\n\n// Save as managed tables by bucketing them in Parquet format\nusersDF.orderBy(asc(\"uid\"))\n    .write.format(\"parquet\")\n    .bucketBy(8, \"uid\")\n    .mode(\"overwrite\")\n    .saveAsTable(\"UsersTbl\")\n\nordersDF.orderBy(asc(\"users_id\"))\n    .write.format(\"parquet\")\n    .bucketBy(8, \"users_id\")\n    .mode(\"overwrite\")\n    .saveAsTable(\"OrdersTbl\")\n\n// Cache the tables\nspark.sql(\"CACHE TABLE UsersTbl\")\nspark.sql(\"CACHE TABLE OrdersTbl\")\n// Read them back in\n\nval usersBucketDF = spark.table(\"UsersTbl\")\nval ordersBucketDF = spark.table(\"OrdersTbl\")\n\n// Do the join and show the results\nval joinUsersOrdersBucketDF = ordersBucketDF\n    .join(usersBucketDF, $\"users_id\" === $\"uid\")\n\n\njoinUsersOrdersBucketDF.show(false)",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------+--------+--------+--------+-----+-----+---+-------+----------------------+----------+\n|transaction_id|quantity|users_id|amount  |state|items|uid|login  |email                 |user_state|\n+--------------+--------+--------+--------+-----+-----+---+-------+----------------------+----------+\n|59378         |59378   |12      |118756.0|AZ   |SKU-3|12 |user_12|user_12@databricks.com|CO        |\n|67064         |67064   |12      |134128.0|NY   |SKU-4|12 |user_12|user_12@databricks.com|CO        |\n|71032         |71032   |12      |142064.0|TX   |SKU-3|12 |user_12|user_12@databricks.com|CO        |\n|71644         |71644   |12      |143288.0|CA   |SKU-0|12 |user_12|user_12@databricks.com|CO        |\n|78358         |78358   |12      |156716.0|TX   |SKU-4|12 |user_12|user_12@databricks.com|CO        |\n|89488         |89488   |12      |178976.0|AZ   |SKU-3|12 |user_12|user_12@databricks.com|CO        |\n|7316          |7316    |12      |14632.0 |TX   |SKU-3|12 |user_12|user_12@databricks.com|CO        |\n|15142         |15142   |12      |30284.0 |TX   |SKU-3|12 |user_12|user_12@databricks.com|CO        |\n|18323         |18323   |12      |36646.0 |CO   |SKU-1|12 |user_12|user_12@databricks.com|CO        |\n|35882         |35882   |12      |71764.0 |CA   |SKU-0|12 |user_12|user_12@databricks.com|CO        |\n|69829         |69829   |13      |139658.0|CO   |SKU-2|13 |user_13|user_13@databricks.com|CA        |\n|80402         |80402   |13      |160804.0|CO   |SKU-1|13 |user_13|user_13@databricks.com|CA        |\n|81893         |81893   |13      |163786.0|NY   |SKU-1|13 |user_13|user_13@databricks.com|CA        |\n|85310         |85310   |13      |170620.0|CO   |SKU-2|13 |user_13|user_13@databricks.com|CA        |\n|93093         |93093   |13      |186186.0|AZ   |SKU-2|13 |user_13|user_13@databricks.com|CA        |\n|7091          |7091    |13      |14182.0 |CA   |SKU-1|13 |user_13|user_13@databricks.com|CA        |\n|9616          |9616    |13      |19232.0 |TX   |SKU-1|13 |user_13|user_13@databricks.com|CA        |\n|13897         |13897   |13      |27794.0 |TX   |SKU-2|13 |user_13|user_13@databricks.com|CA        |\n|26021         |26021   |13      |52042.0 |CO   |SKU-1|13 |user_13|user_13@databricks.com|CA        |\n|57893         |57893   |14      |115786.0|CA   |SKU-1|14 |user_14|user_14@databricks.com|CO        |\n+--------------+--------+--------+--------+-----+-----+---+-------+----------------------+----------+\nonly showing top 20 rows\n\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.SaveMode\nusersBucketDF: org.apache.spark.sql.DataFrame = [uid: int, login: string ... 2 more fields]\nordersBucketDF: org.apache.spark.sql.DataFrame = [transaction_id: int, quantity: int ... 4 more fields]\njoinUsersOrdersBucketDF: org.apache.spark.sql.DataFrame = [transaction_id: int, quantity: int ... 8 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421181_726698911",
      "id": "20201123-164011_1744239178",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30029"
    },
    {
      "text": "\nspark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", \"-1\")\n// Generate some sample data for two data sets\n\nvar city = scala.collection.mutable.Map[Int, String]()\nval rnd = new scala.util.Random(42)\n\n// Initialize states and items purchased\n\ncity += (0 -> \"Moscow\", 1 -> \"Moscow\", 2-> \"Moscow\", 3-> \"Moscow\", 4 -> \"Moscow\", 5 -> \"Kazan\")\n\nfor(i <- (1 to 100)) {\n    (0 to 100000)\n    .map(id => (id, city(rnd.nextInt(6))))\n    .toDF(\"uid\", \"city\")\n    .withColumn(\"partition_id\", lit(i))\n    .write.mode(\"append\")\n    .saveAsTable(\"kotelnikov.uid_city\")\n}\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------+---------+\n|  city|uid_count|\n+------+---------+\n|Moscow|    83155|\n| Kazan|    16846|\n+------+---------+\n\ncity: scala.collection.mutable.Map[Int,String] = Map(2 -> Moscow, 5 -> Kazan, 4 -> Moscow, 1 -> Moscow, 3 -> Moscow, 0 -> Moscow)\nrnd: scala.util.Random = scala.util.Random@5666fa78\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421181_266065215",
      "id": "20201123-182203_1810358308",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30030"
    },
    {
      "text": "\nspark.table(\"kotelnikov.uid_city\")\n.groupBy(\"city\")\n.agg(\n    count(\"uid\").as(\"uid_count\")\n    )\n.show(100)",
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------+---------+\n|  city|uid_count|\n+------+---------+\n|Moscow|  8332487|\n| Kazan|  1667613|\n+------+---------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421181_1326081027",
      "id": "20201119-085550_2026203117",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30031"
    },
    {
      "user": "anonymous",
      "dateUpdated": "2021-02-13T17:47:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1613238421182_1814441898",
      "id": "20201126-182121_1350566758",
      "dateCreated": "2021-02-13T17:47:01+0000",
      "status": "READY",
      "$$hashKey": "object:30032"
    }
  ],
  "name": "lecture 2",
  "id": "2FXU78PW1",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/kotelnikov/lecture 2"
}